// <auto-generated />
using System;
using APITransferencias.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace APITransferencias.Migrations
{
    [DbContext(typeof(APIContext))]
    [Migration("20220721194507_firstMigration")]
    partial class firstMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("APITransferencias.Models.Account", b =>
                {
                    b.Property<string>("num_cta")
                        .HasColumnType("text");

                    b.Property<string>("cedula_cliente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("cod_banco")
                        .IsRequired()
                        .HasColumnType("character varying(8)");

                    b.Property<string>("id_cta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("moneda")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<double>("saldo")
                        .HasColumnType("double precision");

                    b.HasKey("num_cta");

                    b.HasIndex("cedula_cliente");

                    b.HasIndex("cod_banco");

                    b.ToTable("cuenta", (string)null);
                });

            modelBuilder.Entity("APITransferencias.Models.Bank", b =>
                {
                    b.Property<string>("codigo_banco")
                        .HasMaxLength(8)
                        .HasColumnType("character varying(8)");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("nombre_banco")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("codigo_banco");

                    b.ToTable("banco", (string)null);
                });

            modelBuilder.Entity("APITransferencias.Models.Client", b =>
                {
                    b.Property<string>("cedula")
                        .HasColumnType("text");

                    b.Property<string>("nombre_apellido")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("tipo_doc")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("cedula");

                    b.ToTable("cliente", (string)null);
                });

            modelBuilder.Entity("APITransferencias.Models.Transfer", b =>
                {
                    b.Property<string>("id_transaccion")
                        .HasColumnType("text");

                    b.Property<string>("cedula_cliente")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("cod_banco_destino")
                        .IsRequired()
                        .HasColumnType("character varying(8)");

                    b.Property<string>("cod_banco_origen")
                        .IsRequired()
                        .HasColumnType("character varying(8)");

                    b.Property<string>("estado")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<DateTime>("fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("monto")
                        .HasColumnType("real");

                    b.Property<string>("num_cta")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("num_cta_destino")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id_transaccion");

                    b.HasIndex("cod_banco_destino");

                    b.HasIndex("cod_banco_origen");

                    b.HasIndex("num_cta");

                    b.HasIndex("num_cta_destino");

                    b.ToTable("transferencia", (string)null);
                });

            modelBuilder.Entity("APITransferencias.Models.Account", b =>
                {
                    b.HasOne("APITransferencias.Models.Client", "cedula")
                        .WithMany("cedula_ac")
                        .HasForeignKey("cedula_cliente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APITransferencias.Models.Bank", "codigo_banco")
                        .WithMany("codigo_banco_ac")
                        .HasForeignKey("cod_banco")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cedula");

                    b.Navigation("codigo_banco");
                });

            modelBuilder.Entity("APITransferencias.Models.Transfer", b =>
                {
                    b.HasOne("APITransferencias.Models.Bank", "codigo_banco_destino_bk")
                        .WithMany("codigo_banco_destino")
                        .HasForeignKey("cod_banco_destino")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APITransferencias.Models.Bank", "codigo_banco_origen_bk")
                        .WithMany("codigo_banco_origen")
                        .HasForeignKey("cod_banco_origen")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APITransferencias.Models.Account", "num_cta_origen")
                        .WithMany("numero_cta_origen")
                        .HasForeignKey("num_cta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("APITransferencias.Models.Account", "numero_cta_destino_ac")
                        .WithMany("numero_cta_destino")
                        .HasForeignKey("num_cta_destino")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("codigo_banco_destino_bk");

                    b.Navigation("codigo_banco_origen_bk");

                    b.Navigation("num_cta_origen");

                    b.Navigation("numero_cta_destino_ac");
                });

            modelBuilder.Entity("APITransferencias.Models.Account", b =>
                {
                    b.Navigation("numero_cta_destino");

                    b.Navigation("numero_cta_origen");
                });

            modelBuilder.Entity("APITransferencias.Models.Bank", b =>
                {
                    b.Navigation("codigo_banco_ac");

                    b.Navigation("codigo_banco_destino");

                    b.Navigation("codigo_banco_origen");
                });

            modelBuilder.Entity("APITransferencias.Models.Client", b =>
                {
                    b.Navigation("cedula_ac");
                });
#pragma warning restore 612, 618
        }
    }
}
